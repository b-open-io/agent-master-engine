// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: daemon/proto/daemon.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentMasterDaemon_AddServer_FullMethodName           = "/daemon.AgentMasterDaemon/AddServer"
	AgentMasterDaemon_UpdateServer_FullMethodName        = "/daemon.AgentMasterDaemon/UpdateServer"
	AgentMasterDaemon_RemoveServer_FullMethodName        = "/daemon.AgentMasterDaemon/RemoveServer"
	AgentMasterDaemon_GetServer_FullMethodName           = "/daemon.AgentMasterDaemon/GetServer"
	AgentMasterDaemon_ListServers_FullMethodName         = "/daemon.AgentMasterDaemon/ListServers"
	AgentMasterDaemon_EnableServer_FullMethodName        = "/daemon.AgentMasterDaemon/EnableServer"
	AgentMasterDaemon_DisableServer_FullMethodName       = "/daemon.AgentMasterDaemon/DisableServer"
	AgentMasterDaemon_RegisterDestination_FullMethodName = "/daemon.AgentMasterDaemon/RegisterDestination"
	AgentMasterDaemon_RemoveDestination_FullMethodName   = "/daemon.AgentMasterDaemon/RemoveDestination"
	AgentMasterDaemon_ListDestinations_FullMethodName    = "/daemon.AgentMasterDaemon/ListDestinations"
	AgentMasterDaemon_SyncTo_FullMethodName              = "/daemon.AgentMasterDaemon/SyncTo"
	AgentMasterDaemon_SyncToMultiple_FullMethodName      = "/daemon.AgentMasterDaemon/SyncToMultiple"
	AgentMasterDaemon_PreviewSync_FullMethodName         = "/daemon.AgentMasterDaemon/PreviewSync"
	AgentMasterDaemon_StartAutoSync_FullMethodName       = "/daemon.AgentMasterDaemon/StartAutoSync"
	AgentMasterDaemon_StopAutoSync_FullMethodName        = "/daemon.AgentMasterDaemon/StopAutoSync"
	AgentMasterDaemon_GetAutoSyncStatus_FullMethodName   = "/daemon.AgentMasterDaemon/GetAutoSyncStatus"
	AgentMasterDaemon_GetConfig_FullMethodName           = "/daemon.AgentMasterDaemon/GetConfig"
	AgentMasterDaemon_SetConfig_FullMethodName           = "/daemon.AgentMasterDaemon/SetConfig"
	AgentMasterDaemon_LoadConfig_FullMethodName          = "/daemon.AgentMasterDaemon/LoadConfig"
	AgentMasterDaemon_SaveConfig_FullMethodName          = "/daemon.AgentMasterDaemon/SaveConfig"
	AgentMasterDaemon_GetStatus_FullMethodName           = "/daemon.AgentMasterDaemon/GetStatus"
	AgentMasterDaemon_Shutdown_FullMethodName            = "/daemon.AgentMasterDaemon/Shutdown"
	AgentMasterDaemon_Subscribe_FullMethodName           = "/daemon.AgentMasterDaemon/Subscribe"
)

// AgentMasterDaemonClient is the client API for AgentMasterDaemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main daemon service
type AgentMasterDaemonClient interface {
	// Server management
	AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	RemoveServer(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	EnableServer(ctx context.Context, in *EnableServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	DisableServer(ctx context.Context, in *DisableServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	// Destination management
	RegisterDestination(ctx context.Context, in *RegisterDestinationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveDestination(ctx context.Context, in *RemoveDestinationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDestinations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDestinationsResponse, error)
	// Sync operations
	SyncTo(ctx context.Context, in *SyncToRequest, opts ...grpc.CallOption) (*SyncResult, error)
	SyncToMultiple(ctx context.Context, in *SyncToMultipleRequest, opts ...grpc.CallOption) (*MultiSyncResult, error)
	PreviewSync(ctx context.Context, in *PreviewSyncRequest, opts ...grpc.CallOption) (*SyncPreview, error)
	// Auto-sync management
	StartAutoSync(ctx context.Context, in *AutoSyncConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopAutoSync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAutoSyncStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AutoSyncStatus, error)
	// Configuration
	GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error)
	SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LoadConfig(ctx context.Context, in *LoadConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SaveConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Daemon lifecycle
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DaemonStatus, error)
	Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Events (server-streaming)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
}

type agentMasterDaemonClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentMasterDaemonClient(cc grpc.ClientConnInterface) AgentMasterDaemonClient {
	return &agentMasterDaemonClient{cc}
}

func (c *agentMasterDaemonClient) AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_AddServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_UpdateServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) RemoveServer(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_RemoveServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_GetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_ListServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) EnableServer(ctx context.Context, in *EnableServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_EnableServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) DisableServer(ctx context.Context, in *DisableServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_DisableServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) RegisterDestination(ctx context.Context, in *RegisterDestinationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_RegisterDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) RemoveDestination(ctx context.Context, in *RemoveDestinationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_RemoveDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) ListDestinations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDestinationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDestinationsResponse)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_ListDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) SyncTo(ctx context.Context, in *SyncToRequest, opts ...grpc.CallOption) (*SyncResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResult)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_SyncTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) SyncToMultiple(ctx context.Context, in *SyncToMultipleRequest, opts ...grpc.CallOption) (*MultiSyncResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiSyncResult)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_SyncToMultiple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) PreviewSync(ctx context.Context, in *PreviewSyncRequest, opts ...grpc.CallOption) (*SyncPreview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncPreview)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_PreviewSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) StartAutoSync(ctx context.Context, in *AutoSyncConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_StartAutoSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) StopAutoSync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_StopAutoSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) GetAutoSyncStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AutoSyncStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoSyncStatus)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_GetAutoSyncStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Config)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) SetConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) LoadConfig(ctx context.Context, in *LoadConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_LoadConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) SaveConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_SaveConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DaemonStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DaemonStatus)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) Shutdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AgentMasterDaemon_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentMasterDaemonClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentMasterDaemon_ServiceDesc.Streams[0], AgentMasterDaemon_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentMasterDaemon_SubscribeClient = grpc.ServerStreamingClient[Event]

// AgentMasterDaemonServer is the server API for AgentMasterDaemon service.
// All implementations must embed UnimplementedAgentMasterDaemonServer
// for forward compatibility.
//
// Main daemon service
type AgentMasterDaemonServer interface {
	// Server management
	AddServer(context.Context, *AddServerRequest) (*ServerResponse, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*ServerResponse, error)
	RemoveServer(context.Context, *RemoveServerRequest) (*emptypb.Empty, error)
	GetServer(context.Context, *GetServerRequest) (*ServerResponse, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	EnableServer(context.Context, *EnableServerRequest) (*ServerResponse, error)
	DisableServer(context.Context, *DisableServerRequest) (*ServerResponse, error)
	// Destination management
	RegisterDestination(context.Context, *RegisterDestinationRequest) (*emptypb.Empty, error)
	RemoveDestination(context.Context, *RemoveDestinationRequest) (*emptypb.Empty, error)
	ListDestinations(context.Context, *emptypb.Empty) (*ListDestinationsResponse, error)
	// Sync operations
	SyncTo(context.Context, *SyncToRequest) (*SyncResult, error)
	SyncToMultiple(context.Context, *SyncToMultipleRequest) (*MultiSyncResult, error)
	PreviewSync(context.Context, *PreviewSyncRequest) (*SyncPreview, error)
	// Auto-sync management
	StartAutoSync(context.Context, *AutoSyncConfig) (*emptypb.Empty, error)
	StopAutoSync(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetAutoSyncStatus(context.Context, *emptypb.Empty) (*AutoSyncStatus, error)
	// Configuration
	GetConfig(context.Context, *emptypb.Empty) (*Config, error)
	SetConfig(context.Context, *Config) (*emptypb.Empty, error)
	LoadConfig(context.Context, *LoadConfigRequest) (*emptypb.Empty, error)
	SaveConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Daemon lifecycle
	GetStatus(context.Context, *emptypb.Empty) (*DaemonStatus, error)
	Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Events (server-streaming)
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Event]) error
	mustEmbedUnimplementedAgentMasterDaemonServer()
}

// UnimplementedAgentMasterDaemonServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentMasterDaemonServer struct{}

func (UnimplementedAgentMasterDaemonServer) AddServer(context.Context, *AddServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (UnimplementedAgentMasterDaemonServer) UpdateServer(context.Context, *UpdateServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedAgentMasterDaemonServer) RemoveServer(context.Context, *RemoveServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServer not implemented")
}
func (UnimplementedAgentMasterDaemonServer) GetServer(context.Context, *GetServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedAgentMasterDaemonServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedAgentMasterDaemonServer) EnableServer(context.Context, *EnableServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableServer not implemented")
}
func (UnimplementedAgentMasterDaemonServer) DisableServer(context.Context, *DisableServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableServer not implemented")
}
func (UnimplementedAgentMasterDaemonServer) RegisterDestination(context.Context, *RegisterDestinationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDestination not implemented")
}
func (UnimplementedAgentMasterDaemonServer) RemoveDestination(context.Context, *RemoveDestinationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDestination not implemented")
}
func (UnimplementedAgentMasterDaemonServer) ListDestinations(context.Context, *emptypb.Empty) (*ListDestinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinations not implemented")
}
func (UnimplementedAgentMasterDaemonServer) SyncTo(context.Context, *SyncToRequest) (*SyncResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTo not implemented")
}
func (UnimplementedAgentMasterDaemonServer) SyncToMultiple(context.Context, *SyncToMultipleRequest) (*MultiSyncResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncToMultiple not implemented")
}
func (UnimplementedAgentMasterDaemonServer) PreviewSync(context.Context, *PreviewSyncRequest) (*SyncPreview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewSync not implemented")
}
func (UnimplementedAgentMasterDaemonServer) StartAutoSync(context.Context, *AutoSyncConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAutoSync not implemented")
}
func (UnimplementedAgentMasterDaemonServer) StopAutoSync(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAutoSync not implemented")
}
func (UnimplementedAgentMasterDaemonServer) GetAutoSyncStatus(context.Context, *emptypb.Empty) (*AutoSyncStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoSyncStatus not implemented")
}
func (UnimplementedAgentMasterDaemonServer) GetConfig(context.Context, *emptypb.Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedAgentMasterDaemonServer) SetConfig(context.Context, *Config) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedAgentMasterDaemonServer) LoadConfig(context.Context, *LoadConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadConfig not implemented")
}
func (UnimplementedAgentMasterDaemonServer) SaveConfig(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedAgentMasterDaemonServer) GetStatus(context.Context, *emptypb.Empty) (*DaemonStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedAgentMasterDaemonServer) Shutdown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedAgentMasterDaemonServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAgentMasterDaemonServer) mustEmbedUnimplementedAgentMasterDaemonServer() {}
func (UnimplementedAgentMasterDaemonServer) testEmbeddedByValue()                           {}

// UnsafeAgentMasterDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentMasterDaemonServer will
// result in compilation errors.
type UnsafeAgentMasterDaemonServer interface {
	mustEmbedUnimplementedAgentMasterDaemonServer()
}

func RegisterAgentMasterDaemonServer(s grpc.ServiceRegistrar, srv AgentMasterDaemonServer) {
	// If the following call pancis, it indicates UnimplementedAgentMasterDaemonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentMasterDaemon_ServiceDesc, srv)
}

func _AgentMasterDaemon_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_AddServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).AddServer(ctx, req.(*AddServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_UpdateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_RemoveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).RemoveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_RemoveServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).RemoveServer(ctx, req.(*RemoveServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_ListServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_EnableServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).EnableServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_EnableServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).EnableServer(ctx, req.(*EnableServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_DisableServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).DisableServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_DisableServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).DisableServer(ctx, req.(*DisableServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_RegisterDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).RegisterDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_RegisterDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).RegisterDestination(ctx, req.(*RegisterDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_RemoveDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).RemoveDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_RemoveDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).RemoveDestination(ctx, req.(*RemoveDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_ListDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).ListDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_ListDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).ListDestinations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_SyncTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).SyncTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_SyncTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).SyncTo(ctx, req.(*SyncToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_SyncToMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncToMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).SyncToMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_SyncToMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).SyncToMultiple(ctx, req.(*SyncToMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_PreviewSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).PreviewSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_PreviewSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).PreviewSync(ctx, req.(*PreviewSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_StartAutoSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoSyncConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).StartAutoSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_StartAutoSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).StartAutoSync(ctx, req.(*AutoSyncConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_StopAutoSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).StopAutoSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_StopAutoSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).StopAutoSync(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_GetAutoSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).GetAutoSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_GetAutoSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).GetAutoSyncStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).GetConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).SetConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_LoadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).LoadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_LoadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).LoadConfig(ctx, req.(*LoadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_SaveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).SaveConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentMasterDaemonServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentMasterDaemon_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentMasterDaemonServer).Shutdown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentMasterDaemon_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentMasterDaemonServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentMasterDaemon_SubscribeServer = grpc.ServerStreamingServer[Event]

// AgentMasterDaemon_ServiceDesc is the grpc.ServiceDesc for AgentMasterDaemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentMasterDaemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.AgentMasterDaemon",
	HandlerType: (*AgentMasterDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServer",
			Handler:    _AgentMasterDaemon_AddServer_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _AgentMasterDaemon_UpdateServer_Handler,
		},
		{
			MethodName: "RemoveServer",
			Handler:    _AgentMasterDaemon_RemoveServer_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _AgentMasterDaemon_GetServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _AgentMasterDaemon_ListServers_Handler,
		},
		{
			MethodName: "EnableServer",
			Handler:    _AgentMasterDaemon_EnableServer_Handler,
		},
		{
			MethodName: "DisableServer",
			Handler:    _AgentMasterDaemon_DisableServer_Handler,
		},
		{
			MethodName: "RegisterDestination",
			Handler:    _AgentMasterDaemon_RegisterDestination_Handler,
		},
		{
			MethodName: "RemoveDestination",
			Handler:    _AgentMasterDaemon_RemoveDestination_Handler,
		},
		{
			MethodName: "ListDestinations",
			Handler:    _AgentMasterDaemon_ListDestinations_Handler,
		},
		{
			MethodName: "SyncTo",
			Handler:    _AgentMasterDaemon_SyncTo_Handler,
		},
		{
			MethodName: "SyncToMultiple",
			Handler:    _AgentMasterDaemon_SyncToMultiple_Handler,
		},
		{
			MethodName: "PreviewSync",
			Handler:    _AgentMasterDaemon_PreviewSync_Handler,
		},
		{
			MethodName: "StartAutoSync",
			Handler:    _AgentMasterDaemon_StartAutoSync_Handler,
		},
		{
			MethodName: "StopAutoSync",
			Handler:    _AgentMasterDaemon_StopAutoSync_Handler,
		},
		{
			MethodName: "GetAutoSyncStatus",
			Handler:    _AgentMasterDaemon_GetAutoSyncStatus_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _AgentMasterDaemon_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _AgentMasterDaemon_SetConfig_Handler,
		},
		{
			MethodName: "LoadConfig",
			Handler:    _AgentMasterDaemon_LoadConfig_Handler,
		},
		{
			MethodName: "SaveConfig",
			Handler:    _AgentMasterDaemon_SaveConfig_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _AgentMasterDaemon_GetStatus_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _AgentMasterDaemon_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AgentMasterDaemon_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "daemon/proto/daemon.proto",
}
